######################################################## 
#~~~~~~~~~~~~~~~~~~  DYNAMO PROPERTIES ~~~~~~~~~~~~~~~##
########################################################

#-------------------- Dynamo General  --------------------#

dynamo.applicationName=Dynamo Web Application
dynamo.applicationOwner=Breeze Technologies
dynamo.applicationCopyrightYear=2018-2019
dynamo.applicationAdminEmail=karthik@breezeware.net
dynamo.fileUploadLocation = /tmp/upload-directory
dynamo.applicationServerUrl = https://localhost:8443

logging.config=classpath:log4j2.yml


#-------------------- Dynamo Communication --------------------#

#AWS SNS Credentials
dynamo-communication.aws-snsAccesskey=
dynamo-communication.aws-snsSecretkey=
dynamo-communication.aws-snsRegion=us-east-1

#SINCH Messaging Service Credentials
dynamo-communication.sinch-apiToken=
dynamo-communication.sinch-servicePlanId=

#-------------------- Dynamo Auth --------------------#

#User Authentication (Options: PlainText, SHA)
dynamo-auth.passwordEncoding=PlainText

#-------------------- Dynamo Audit --------------------#

#User Authentication (Options: PlainText, SHA)
dynamo-audit.enableAuditing=true



################################################################## 
#~~~~~~~~~~~~~~~~~~  SPRING FRAMEWORK PROPERTIES ~~~~~~~~~~~~~~~##
###############################################@@@@@@@@@@#########

server.servlet.session.cookie.name = dynamo-webapp-cookie

#-------------------- Data Source --------------------#

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://192.168.99.100:5432/dynamo_webapp
spring.datasource.username=dynamo_webapp_usr
spring.datasource.password=dynamo123

#-------------------- JPA  -------------------#

spring.jpa.database = POSTGRESQL
spring.jpa.show-sql = true
spring.data.jpa.repositories.enabled=true

#-------------------- Java Mail --------------------#

spring.mail.host=
spring.mail.port=
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#-------------------- Hibernate --------------------#

spring.jpa.hibernate.ddl-auto=update

#-------------------- JTA --------------------#

spring.jta.enabled=false

#-------------------- Spring Security --------------------#

# disable spring security to prevent default login popup.
security.basic.enable= false
spring.security.enabled=false 
security.ignored=/**
management.security.enabled=false

#-------------------- Active Profiles (supported options: LDAPAuthentication, DBAuthentication) --------------------#

spring.profiles.active=DBAuthentication,jdbc

#-------------------- Cloud Server Config --------------------#

management.endpoints.web.exposure.include=*

#-------------------- HTTPS & SSL Keystore --------------------#

security.require-ssl=true

## The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=PKCS12
## The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore/tsgdevkeystore.jks
## The password used to generate the certificate
#server.ssl.key-store-password=breeze123
## The alias mapped to the certificate
#server.ssl.key-alias=tsgdevkeystore
##security.require-ssl=true
##server.port=8443

security.require-ssl=true
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore/tsgdevkeystore.p12
server.ssl.key-store-password=breeze123
server.ssl.key-alias=tsgdevkeystore
server.port=8443

#-------------------- OAuth2 login for in-built clients (Google) --------------------#

spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=

#-------------------- OAuth2 login for in-built clients (Okta) --------------------#

spring.security.oauth2.client.registration.okta.client-id=
spring.security.oauth2.client.registration.okta.client-secret=
spring.security.oauth2.client.provider.okta.authorization-uri=
spring.security.oauth2.client.provider.okta.token-uri=
spring.security.oauth2.client.provider.okta.user-info-uri=
spring.security.oauth2.client.provider.okta.jwk-set-uri=


#-------------------- OAuth2 login for in-built clients (OneLogin) --------------------#
spring.security.oauth2.client.registration.onelogin.client-name=OneLogin
spring.security.oauth2.client.registration.onelogin.client-id=
spring.security.oauth2.client.registration.onelogin.client-secret=
spring.security.oauth2.client.registration.onelogin.provider=onelogin
spring.security.oauth2.client.registration.onelogin.scope=openid,profile
spring.security.oauth2.client.registration.onelogin.client-authentication-method=basic
spring.security.oauth2.client.registration.onelogin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.onelogin.redirect-uri-template=http://127.0.0.1/login/oauth2/code/onelogin

spring.security.oauth2.client.provider.onelogin.authorization-uri=https://openid-connect.onelogin.com/oidc/auth
spring.security.oauth2.client.provider.onelogin.token-uri=https://openid-connect.onelogin.com/oidc/token
spring.security.oauth2.client.provider.onelogin.user-info-uri=https://openid-connect.onelogin.com/oidc/me
spring.security.oauth2.client.provider.onelogin.jwk-set-uri=https://openid-connect.onelogin.com/oidc/certs
spring.security.oauth2.client.provider.onelogin.user-name-attribute=sub

#-------------------- OAuth2 login for in-built clients (Realfactor) --------------------#
spring.security.oauth2.client.registration.realfactor.client-id=
spring.security.oauth2.client.registration.realfactor.client-secret=
spring.security.oauth2.client.registration.realfactor.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.realfactor.redirect-uri-template=http://127.0.0.1/login/oauth2/code/realfactor
spring.security.oauth2.client.registration.realfactor.scope=openid,email
spring.security.oauth2.client.registration.realfactor.client-authentication-method=post

spring.security.oauth2.client.provider.realfactor.authorization-uri=http://localhost:3000/#!/authorize
spring.security.oauth2.client.provider.realfactor.token-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/access-token
spring.security.oauth2.client.provider.realfactor.access-token-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/access-token
#spring.security.oauth2.client.provider.realfactor.user-authorization-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/authorization-code
spring.security.oauth2.client.provider.realfactor.user-info-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/user-info

#spring.security.oauth2.client.provider.realfactor.authorization-uri=http://localhost:3000/#!/authorize
#spring.security.oauth2.client.provider.realfactor.token-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/access-token
#spring.security.oauth2.client.provider.realfactor.access-token-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/access-token
##spring.security.oauth2.client.provider.realfactor.user-authorization-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/access-token
#spring.security.oauth2.client.provider.realfactor.user-info-uri=http://ec2-54-184-14-77.us-west-2.compute.amazonaws.com:8080/idforweb-server/api/user-info

#-------------------- UPS Postal Service --------------------#
ups.username=
ups.password=
ups.accesskey=
ups.accountnumber=
ups.shipping.createlabel.testing.uri=
